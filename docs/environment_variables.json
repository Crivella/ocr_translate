[
    {
        "title": "App variable list",
        "description": "Environment variables used by the application.",
        "variables": {
            "OCT_VERSION": {
                "default": "",
                "usage": "Default set to the downloaded release version Version the `run_server.py` script will attempt to install/update to. Can be either a version number (`A.B.C` eg `0.6.1``) or last/latest."
            },
            "OCT_AUTOUPDATE": {
                "default": "false",
                "usage": "If true, the server will attempt to update the main package to the version specified by `OCT_VERSION`"
            },
            "OCT_BASE_DIR": {
                "default": "false",
                "usage": "Path to the base directory of the project. If no other paths are configured using environment variables, the server database, plugin files and downloaded models will be stored here."
            },
            "LOAD_ON_START": {
                "default": "false",
                "usage": "`most`: Load the most used models and the respective languages `last`: Load the last used models and languages source/destination languages and most used models for that language combination at server start"
            },
            "AUTOCREATE_LANGUAGES": {
                "default": "false",
                "usage": "Will force the server to automatically create/update the Language entries in the database."
            },
            "DEVICE": {
                "default": "cpu",
                "usage": "Which device to use for plugins that support it. Currently allowed: cpu, cuda"
            },
            "NUM_MAIN_WORKERS": {
                "default": 4,
                "usage": "Number of `WorkerMessageQueue` workers handling incoming OCR_TSL post requests"
            },
            "NUM_BOX_WORKERS": {
                "default": 1,
                "usage": "Number of `WorkerMessageQueue` workers handling box_ocr pipelines (Should be set as 1 until the pipeline is build to handle multiple concurrent request efficiently without slowdowns)"
            },
            "NUM_OCR_WORKERS": {
                "default": 1,
                "usage": "Number of `WorkerMessageQueue` workers handling ocr pipelines (Should be set as 1 until the pipeline is build to handle multiple concurrent request efficiently without slowdowns)"
            },
            "NUM_TSL_WORKERS": {
                "default": 1,
                "usage": "Number of `WorkerMessageQueue` workers handling translation pipelines (Should be set as 1 until the pipeline is build to handle multiple concurrent request efficiently without slowdowns)"
            }
        }
    },
    {
        "title": "run_server.py variable list",
        "description": "Environment variables used if running the server using the provided `run_server.py` script. This includes the windows release file and docker image that are based on the same script.",
        "variables": {
            "DJANGO_SUPERUSER_USERNAME": {
                "default": "admin",
                "usage": "Username for the superuser to be created"
            },
            "DJANGO_SUPERUSER_PASSWORD": {
                "default": "password",
                "usage": "Password for the superuser to be created"
            },
            "USE_CORS_HEADERS": {
                "default": "false",
                "usage": "Allow setting of CORS headers in the server responses"
            },
            "CORS_ALLOWED_ORIGINS": {
                "default": "",
                "usage": "List of semi-colon `;` separated URLs that are allowed to access the server. CSRF_TRUSTED_ORIGINS is set to the same value (can use this with USE_CORS_HEADERS=false) to set CSRF_TRUSTED_ORIGINS only. EXAMPLE: `CORS_ALLOWED_ORIGINS=\"http://localhost:4000;http://127.0.0.1:4000\"`"
            },
            "CORS_ALLOW_METHODS": {
                "default": "LIB default",
                "usage": "List of semi-colon `;` separated HTTP methods that are allowed to be used. EXAMPLE: `CORS_ALLOW_METHODS=\"GET;POST;PUT;DELETE;OPTIONS;PATCH\"`"
            },
            "CORS_ALLOW_HEADERS": {
                "default": "LIB default",
                "usage": "List of semi-colon `;` separated HTTP headers that are allowed to be used. EXAMPLE: `CORS_ALLOW_HEADERS=\"Content-Type;Authorization;X-CSRFToken\"`"
            },
            "OCT_DJANGO_BIND_ADDRESS": {
                "default": "127.0.0.1",
                "usage": "Address to bind the server to"
            },
            "OCT_DJANGO_PORT": {
                "default": 4000,
                "usage": "Port the server will listen to"
            },
            "OCT_GUNICORN_USER": {
                "default": "current user",
                "usage": "User to run the server as if using gunicorn."
            },
            "OCT_GUNICORN_TIMEOUT": {
                "default": 1200,
                "usage": "Timeout for gunicorn workers"
            },
            "OCT_GUNICORN_NUM_WORKERS": {
                "default": 1,
                "usage": "Number of gunicorn workers"
            }
        }
    },
    {
        "title": "Server variable list",
        "description": "Environment variables used specifically by the DJANGO server.",
        "variables": {
            "DJANGO_DEBUG": {
                "default": "false",
                "usage": "Whether to run the server in debug (true) or production (false) mode"
            },
            "DJANGO_LOG_LEVEL": {
                "default": "INFO",
                "usage": "Python `logging` level. See https://docs.python.org/3/library/logging.html#logging-levels for allowed values"
            },
            "DJANGO_ALLOWED_HOSTS": {
                "default": "optional",
                "usage": "Add list of semi-colon `;` separated IPs to the `ALLOWED_HOSTS` of the server. Needed if you want to host the server on a different machine than the one querying it. EXAMPLE: `DJANGO_ALLOWED_HOSTS=\"192.168.1.1;172.108.104.3\"`. See Django Documentation for more info: https://docs.djangoproject.com/en/2.2/ref/settings/#allowed-hosts"
            },
            "DATABASE_NAME": {
                "default": "db.sqlite3",
                "usage": "For `sqlite3` this is the path to the database file. For other backends, it should be the name of the database"
            },
            "DATABASE_ENGINE": {
                "default": "django.db.backends.sqlite3",
                "usage": "Change this to either a Django or 3rd party provided backend to use another Database type"
            },
            "DATABASE_HOST": {
                "default": "optional",
                "usage": "Required if using another database backend"
            },
            "DATABASE_PORT": {
                "default": "optional",
                "usage": "Required if using another database backend"
            },
            "DATABASE_USER": {
                "default": "optional",
                "usage": "Probably required if using another database backend"
            },
            "DATABASE_PASSWORD": {
                "default": "optional",
                "usage": "Probably required if using another database backend"
            }
        }
    }
]